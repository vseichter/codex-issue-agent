name: Issue Assigned to vseichter

permissions:
  contents: write        # allow pushing commits and branches
  pull-requests: write   # allow creating pull requests
  issues: write          # allow updating issues if needed

on:
  issues:
    types: [assigned]

jobs:
  create-branch-and-pr:
    if: ${{ github.event.assignee.login == 'vseichter' }}
    runs-on: ubuntu-latest

    steps:
      # Checkout the default branch with full history
      - name: Checkout repository (full history)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true
          ref: ${{ github.event.repository.default_branch }}

      - name: Log env after checkout
        shell: bash
        run: |
          set -euxo pipefail
          echo "### After checkout ###"
          echo "Date: $(date)"
          echo "GitHub event: $GITHUB_EVENT_NAME"
          echo "Working dir: $(pwd)"
          echo "Directory listing:"
          ls -alh
          echo "Git remotes:"
          git remote -v

      - name: Setup Node.js (>=20)
        uses: actions/setup-node@v3
        with:
          node-version: '>=20'

      - name: Install OpenAI Codex CLI
        shell: bash
        run: |
          set -euxo pipefail
          echo "### Installing Codex CLI ###"
          npm install -g @openai/codex
          echo "Codex version: $(codex --version || echo 'not installed')"

      - name: Export OpenAI API Key
        shell: bash
        run: |
          set -euxo pipefail
          echo "### Exporting OpenAI key ###"
          echo "OPENAI_API_KEY=${{ secrets.open_api_key }}" >> $GITHUB_ENV

      - name: Determine branch name
        id: derive_branch
        shell: bash
        run: |
          set -euxo pipefail
          echo "### Determining branch name ###"
          title="${{ github.event.issue.title }}"
          num="${{ github.event.issue.number }}"
          sanitized=$(echo "$title" \
            | tr '[:upper:]' '[:lower:]' \
            | sed -E 's/[^a-z0-9]+/-/g' \
            | sed -E 's/^-+|-+$//g')
          branch="issue-${num}-${sanitized}"
          echo "branch=$branch" >> "$GITHUB_OUTPUT"

      - name: Checkout or create branch
        shell: bash
        run: |
          set -euxo pipefail
          branch="${{ steps.derive_branch.outputs.branch }}"
          echo "### Checkout or create branch ($branch) ###"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          if git ls-remote --exit-code --heads origin "$branch"; then
            git fetch origin "$branch"
            git switch "$branch"
          elif git show-ref --verify --quiet "refs/heads/$branch"; then
            git switch "$branch"
          else
            git switch -c "$branch"
          fi
          if ! git ls-remote --exit-code --heads origin "$branch"; then
            git push -u origin "$branch"
          fi

      - name: Add placeholder test file
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p tests/unit
          cat << 'EOF' > tests/unit/test_placeholder.py
          # tests/unit/test_placeholder.py
          # A basic pytest test suite

          import pytest

          def test_true_is_truthy():
              assert True, "True should be truthy"

          def test_sample_math():
              # A simple math test
              assert 1 + 1 == 2, "Basic arithmetic should work"

          @pytest.mark.parametrize("input,expected", [
              (0, 0),
              (1, 1),
              (2, 4),
              (3, 9),
          ])
          def test_square(input, expected):
              # Example function to square a number
              def square(x):
                  return x * x
              assert square(input) == expected
          EOF

      - name: Commit & push placeholder test
        id: commit
        shell: bash
        run: |
          set -euxo pipefail
          branch="${{ steps.derive_branch.outputs.branch }}"
          echo "On branch: $(git branch --show-current)"
          # Stage all changes
          git add -A
          echo "Git status after staging:" && git status
          # Commit only if there are changes
          if git diff --cached --quiet; then
            echo "ℹ️  No new changes to commit, using existing HEAD"
          else
            echo "🔨 Committing changes for placeholder test"
            git commit -m "chore: add placeholder test for issue #${{ github.event.issue.number }}"
          fi
          # Capture the current HEAD SHA (new or existing)
          sha=$(git rev-parse HEAD)
          echo "sha=$sha" >> $GITHUB_OUTPUT
          # Push branch to update refs
          echo "🚀 Pushing branch $branch to origin"
          git push origin "$branch"

      - name: Force attach commit via GitHub API
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = '${{ steps.derive_branch.outputs.branch }}';
            const sha    = '${{ steps.commit.outputs.sha }}';
            console.log(`Attaching commit ${sha} to branch ${branch}`);
            await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              ref:   `heads/${branch}`,
              sha:   sha,
              force: true,
            });

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.derive_branch.outputs.branch }}
          title: "chore: add placeholder test for issue #${{ github.event.issue.number }}"
          body: |
            Automated PR to add placeholder test for issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}
          base: main

      - name: Notify assignment
        shell: bash
        run: |
          set -euxo pipefail
          echo "Issue #${{ github.event.issue.number }} assigned to vseichter at $(date)"
