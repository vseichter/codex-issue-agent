name: Issue Assigned to vseichter

on:
  issues:
    types: [assigned]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  create-branch-and-pr:
    if: ${{ github.event.assignee.login == 'vseichter' }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

    steps:
      - name: Determine branch name
        id: derive_branch
        shell: bash
        run: |
          num=${{ github.event.issue.number }}
          title="${{ github.event.issue.title }}"
          sanitized=$(echo "$title" \
            | tr '[:upper:]' '[:lower:]' \
            | sed -E 's/[^a-z0-9]+/-/g' \
            | sed -E 's/^-+|-+$//g')
          echo "branch=issue-${num}-${sanitized}" >> "$GITHUB_OUTPUT"

      - name: Create (or fetch) branch via REST API
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const branch = '${{ steps.derive_branch.outputs.branch }}';
            const defaultBranch = context.payload.repository.default_branch;

            // try fetching the branch
            try {
              await github.rest.git.getRef({ owner, repo, ref: `heads/${branch}` });
            } catch {
              // branch doesn't exist → get default‐branch SHA and create new branch
              const { data: baseRef } = await github.rest.git.getRef({
                owner, repo, ref: `heads/${defaultBranch}`
              });
              await github.rest.git.createRef({
                owner, repo,
                ref: `refs/heads/${branch}`,
                sha: baseRef.object.sha
              });
            }

      - name: Add placeholder test via REST API
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const branch = '${{ steps.derive_branch.outputs.branch }}';
            const issueNumber = context.payload.issue.number;

            const filePath = 'tests/unit/test_placeholder.py';
            const content = `# tests/unit/test_placeholder.py
            # A basic pytest test suite

            import pytest

            def test_true_is_truthy():
                assert True, "True should be truthy"

            def test_sample_math():
                assert 1 + 1 == 2, "Basic arithmetic should work"

            @pytest.mark.parametrize("input,expected", [
                (0, 0),
                (1, 1),
                (2, 4),
                (3, 9),
            ])
            def test_square(input, expected):
                def square(x):
                    return x * x
                assert square(input) == expected
            `;
                        await github.rest.repos.createOrUpdateFileContents({
                          owner, repo,
                          path: filePath,
                          message: `chore: add placeholder test for issue #${issueNumber}`,
                          content: Buffer.from(content).toString('base64'),
                          branch
                        });

      - name: Open Pull Request via REST API
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const branch = '${{ steps.derive_branch.outputs.branch }}';
            const base = context.payload.repository.default_branch;
            const issueNumber = context.payload.issue.number;
            await github.rest.pulls.create({
              owner, repo,
              head: branch,
              base,
              title: `chore: add placeholder test for issue #${issueNumber}`,
              body: `Automated PR to add placeholder test for issue #${issueNumber}: ${{ github.event.issue.title }}`
            });

      - name: Comment on the issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Issue #${context.issue.number} assigned to vseichter at ${new Date().toISOString()}`
            });
