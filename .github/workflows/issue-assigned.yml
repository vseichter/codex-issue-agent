name: Issue Assigned to vseichter

on:
  issues:
    types: [assigned]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  create-branch-and-pr:
    if: ${{ github.event.assignee.login == 'vseichter' }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

    steps:
      - name: Determine branch name
        id: derive_branch
        shell: bash
        run: |
          num=${{ github.event.issue.number }}
          title="${{ github.event.issue.title }}"
          sanitized=$(echo "$title" \
            | tr '[:upper:]' '[:lower:]' \
            | sed -E 's/[^a-z0-9]+/-/g' \
            | sed -E 's/^-+|-+$//g')
          echo "branch=issue-${num}-${sanitized}" >> "$GITHUB_OUTPUT"

      - name: Create (or fetch) branch
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const branch = '${{ steps.derive_branch.outputs.branch }}';
            const defaultBranch = context.payload.repository.default_branch;

            // try fetching the branch
            try {
              await github.rest.git.getRef({ owner, repo, ref: `heads/${branch}` });
            } catch {
              // branch doesn't exist → get default‐branch SHA and create new branch
              const { data: baseRef } = await github.rest.git.getRef({
                owner, repo, ref: `heads/${defaultBranch}`
              });
              await github.rest.git.createRef({
                owner, repo,
                ref: `refs/heads/${branch}`,
                sha: baseRef.object.sha
              });
            }
      - name: Setup Node.js (>=20)
        uses: actions/setup-node@v3
        with:
          node-version: '>=20'

      - name: Install OpenAI Codex CLI
        run: npm install -g @openai/codex

      - name: Set OpenAI API Key
        run: echo "OPENAI_API_KEY=${{ secrets.open_api_key }}" >> $GITHUB_ENV
        shell: bash

      - name: Checkout branch for Codex edits
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          ref: ${{ steps.derive_branch.outputs.branch }}
          fetch-depth: 0

      - name: Run Codex CLI in full-auto mode (no push)
        env:
          OPENAI_API_KEY: ${{ secrets.open_api_key }}
        run: |
          num="${{ github.event.issue.number }}"
          title="${{ github.event.issue.title }}"
          body="${{ github.event.issue.body }}"
          prompt="Issue #${num}: ${title}\n\n${body}"
          codex --full-auto --quiet "$prompt"
        shell: bash

      - name: Generate AI-powered commit message
        id: gen_commit_msg
        run: |
          # grab the diff (or empty if none)
          diff=$(git diff || true)

          # build a compact OpenAI request JSON
          payload=$(jq -n --arg num "${{ github.event.issue.number }}" \
                          --arg title "${{ github.event.issue.title }}" \
                          --arg body "${{ github.event.issue.body }}" \
                          --arg diff "$diff" \
            '{
              model: "gpt-4o-mini",
              messages: [
                {role:"system", content:"You are an expert at writing concise, imperative git commit messages. Always reply with exactly one line."},
                {role:"user", content:"Issue #\($num): \($title)\n\n\($body)\n\nDiff:\n\($diff)\n\nWrite a one-line commit message in the form `verb: description`."}
              ],
              max_tokens: 50
            }'
          )

          # call the API
          response=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$payload")

          # extract the first line
          commit_msg=$(echo "$response" | jq -r '.choices[0].message.content' | head -n1)

          # fallback if null or empty
          if [[ -z "$commit_msg" ]] || [[ "$commit_msg" == "null" ]]; then
            commit_msg="chore: update code for issue #${{ github.event.issue.number }}"
          fi

          echo "commit_message=$commit_msg" >> $GITHUB_OUTPUT
        env:
          OPENAI_API_KEY: ${{ secrets.open_api_key }}
        shell: bash

      - name: Auto-commit any changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          add_options: '-A'
          # pull in the AI-generated message
          commit_message: ${{ steps.gen_commit_msg.outputs.commit_message }}
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          branch: ${{ steps.derive_branch.outputs.branch }}
          push_options: '--force-with-lease'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}


      - name: Generate PR description
        id: gen_pr_body
        run: |
          # get the diff against default branch (if any)
          base="${{ github.event.repository.default_branch }}"
          git fetch origin "$base":"$base"
          diff=$(git diff "$base"...HEAD || true)

          # build payload
          payload=$(jq -n --arg num "${{ github.event.issue.number }}" \
                          --arg title "${{ github.event.issue.title }}" \
                          --arg body "${{ github.event.issue.body }}" \
                          --arg diff "$diff" \
            '{
              model: "gpt-4o-mini",
              messages: [
                {role:"system", content:"You are an expert at writing clear, concise GitHub pull request descriptions. Highlight what changed, why, and any testing instructions."},
                {role:"user", content:"Issue #\($num): \($title)\n\nDescription:\n\($body)\n\nDiff:\n\($diff)\n\nWrite a detailed PR description in markdown."}
              ],
              max_tokens: 300
            }'
          )

          # call the API
          response=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$payload")

          # extract and fallback
          pr_body=$(echo "$response" | jq -r '.choices[0].message.content')
          if [[ -z "$pr_body" ]] || [[ "$pr_body" == "null" ]]; then
            pr_body="Automated PR for issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}"
          fi

          # emit multiline output
          echo "pr_body<<EOF" >> $GITHUB_OUTPUT
          echo "$pr_body"        >> $GITHUB_OUTPUT
          echo "EOF"             >> $GITHUB_OUTPUT
        env:
          OPENAI_API_KEY: ${{ secrets.open_api_key }}
        shell: bash
  
      - name: Open Pull Request via REST API
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const branch = '${{ steps.derive_branch.outputs.branch }}';
            const base   = context.payload.repository.default_branch;
            const issue  = context.payload.issue;

            // Use the issue title directly as the PR title
            const prTitle = issue.title;
            // Inject our AI-generated body
            const prBody  = `${{ steps.gen_pr_body.outputs.pr_body }}`;

            await github.rest.pulls.create({
              owner,
              repo,
              head: branch,ß
              base,
              title: prTitle,
              body: prBody
            });
