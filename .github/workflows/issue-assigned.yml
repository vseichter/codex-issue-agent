name: Issue Assigned to vseichter

permissions:
  contents: write        # allow pushing commits and branches
  pull-requests: write   # allow creating pull requests
  issues: write          # allow updating issues if needed

on:
  issues:
    types: [assigned]

jobs:
  create-branch-and-pr:
    if: ${{ github.event.assignee.login == 'vseichter' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Node.js (>=20)
        uses: actions/setup-node@v3
        with:
          node-version: '>=20'

      - name: Install OpenAI Codex CLI
        run: npm install -g @openai/codex

      - name: Export OpenAI API Key
        run: echo "OPENAI_API_KEY=${{ secrets.open_api_key }}" >> $GITHUB_ENV
        shell: bash

      - name: Determine branch name
        id: derive_branch
        shell: bash
        run: |
          title="${{ github.event.issue.title }}"
          num="${{ github.event.issue.number }}"
          sanitized=$(echo "$title" \
            | tr '[:upper:]' '[:lower:]' \
            | sed -E 's/[^a-z0-9]+/-/g' \
            | sed -E 's/^-+|-+$//g')
          echo "branch=issue-${num}-${sanitized}" >> $GITHUB_OUTPUT

      - name: Checkout or create branch
        shell: bash
        run: |
          branch="${{ steps.derive_branch.outputs.branch }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # if exists locally
          if git rev-parse --verify --quiet "$branch"; then
            git checkout "$branch"

          # else if exists on origin → track it
          elif git ls-remote --exit-code --heads origin "$branch"; then
            git fetch origin "$branch"
            git checkout --track origin/"$branch"

          # else create, track & push
          else
            git checkout -b "$branch"
            git push -u origin "$branch"
          fi

      - name: Add placeholder test file
        shell: bash
        run: |
          mkdir -p tests/unit
          cat << 'EOF' > tests/unit/test_placeholder.py
          import pytest

          def test_placeholder():
              assert True
          EOF

      - name: Debug git status & branch
        shell: bash
        run: |
          echo "On branch: $(git rev-parse --abbrev-ref HEAD)"
          git status

      - name: Commit & push placeholder test
        shell: bash
        run: |
          branch="${{ steps.derive_branch.outputs.branch }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add -A
          if git diff --cached --quiet; then
            echo "⚠️ No changes to commit"
          else
            git commit -m "chore: add placeholder test for issue #${{ github.event.issue.number }}"
          fi

          # always push to the correct branch
          git push origin

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.derive_branch.outputs.branch }}
          title: "chore: add placeholder test for issue #${{ github.event.issue.number }}"
          body: |
            Automated PR to add placeholder test for issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}
          base: main

      - name: Notify assignment
        shell: bash
        run: |
          echo "Issue #${{ github.event.issue.number }} assigned to vseichter"
