name: Issue Assigned to vseichter

on:
  issues:
    types: [assigned]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  create-branch-and-pr:
    if: ${{ github.event.assignee.login == 'vseichter' }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

    steps:
      - name: Determine branch name
        id: derive_branch
        shell: bash
        run: |
          num=${{ github.event.issue.number }}
          title="${{ github.event.issue.title }}"
          sanitized=$(echo "$title" \
            | tr '[:upper:]' '[:lower:]' \
            | sed -E 's/[^a-z0-9]+/-/g' \
            | sed -E 's/^-+|-+$//g')
          echo "branch=issue-${num}-${sanitized}" >> "$GITHUB_OUTPUT"

      - name: Create (or fetch) branch
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const branch = '${{ steps.derive_branch.outputs.branch }}';
            const defaultBranch = context.payload.repository.default_branch;

            // try fetching the branch
            try {
              await github.rest.git.getRef({ owner, repo, ref: `heads/${branch}` });
            } catch {
              // branch doesn't exist → get default‐branch SHA and create new branch
              const { data: baseRef } = await github.rest.git.getRef({
                owner, repo, ref: `heads/${defaultBranch}`
              });
              await github.rest.git.createRef({
                owner, repo,
                ref: `refs/heads/${branch}`,
                sha: baseRef.object.sha
              });
            }
      - name: Setup Node.js (>=20)
        uses: actions/setup-node@v3
        with:
          node-version: '>=20'

      - name: Install OpenAI Codex CLI
        run: npm install -g @openai/codex

      - name: Set OpenAI API Key
        run: echo "OPENAI_API_KEY=${{ secrets.open_api_key }}" >> $GITHUB_ENV
        shell: bash

      - name: Checkout branch for Codex edits
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          ref: ${{ steps.derive_branch.outputs.branch }}
          fetch-depth: 0

      - name: Run Codex CLI in full-auto mode (no push)
        env:
          OPENAI_API_KEY: ${{ secrets.open_api_key }}
        run: |
          num="${{ github.event.issue.number }}"
          title="${{ github.event.issue.title }}"
          body="${{ github.event.issue.body }}"
          prompt="Issue #${num}: ${title}\n\n${body}"
          codex --full-auto --quiet "$prompt"
        shell: bash

      - name: Generate AI-powered commit message
        id: gen_commit_msg
        run: |
          # grab the diff
          diff=$(git diff)

          # call ChatGPT to generate a one-line, imperative commit message
          commit_msg=$(curl https://api.openai.com/v1/chat/completions \
            -s \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gpt-4o-mini",
              "messages": [
                {"role": "system", "content": "You are a tool that writes concise, imperative git commit messages."},
                {"role": "user", "content": "Issue #'"${{ github.event.issue.number }}"': '"${{ github.event.issue.title }}"' — '"${{ github.event.issue.body }}"' Diff:\n'"$diff"'"}
              ]
            }' | jq -r '.choices[0].message.content' | head -n1)

          # expose for downstream steps
          echo "commit_message=$commit_msg" >> $GITHUB_OUTPUT
        env:
          OPENAI_API_KEY: ${{ secrets.open_api_key }}
        shell: bash

      - name: Auto-commit any changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          add_options: '-A'
          # pull in the AI-generated message
          commit_message: ${{ steps.gen_commit_msg.outputs.commit_message }}
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          branch: ${{ steps.derive_branch.outputs.branch }}
          push_options: '--force-with-lease'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}


      - name: Open Pull Request via REST API
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const branch = '${{ steps.derive_branch.outputs.branch }}';
            const base = context.payload.repository.default_branch;
            const issueNumber = context.payload.issue.number;
            await github.rest.pulls.create({
              owner, repo,
              head: branch,
              base,
              title: `chore: add placeholder test for issue #${issueNumber}`,
              body: `Automated PR to add placeholder test for issue #${issueNumber}: ${{ github.event.issue.title }}`
            });
