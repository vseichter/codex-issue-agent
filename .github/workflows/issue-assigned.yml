name: Issue Assigned to vseichter

on:
  issues:
    types: [assigned]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  create-branch-and-pr:
    if: ${{ github.event.assignee.login == 'vseichter' }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

    steps:
      - name: Determine branch name
        id: derive_branch
        shell: bash
        run: |
          num=${{ github.event.issue.number }}
          title="${{ github.event.issue.title }}"
          sanitized=$(echo "$title" \
            | tr '[:upper:]' '[:lower:]' \
            | sed -E 's/[^a-z0-9]+/-/g' \
            | sed -E 's/^-+|-+$//g')
          echo "branch=issue-${num}-${sanitized}" >> "$GITHUB_OUTPUT"

      - name: Create (or fetch) branch via REST API
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const branch = '${{ steps.derive_branch.outputs.branch }}';
            const defaultBranch = context.payload.repository.default_branch;

            // try fetching the branch
            try {
              await github.rest.git.getRef({ owner, repo, ref: `heads/${branch}` });
            } catch {
              // branch doesn't exist → get default‐branch SHA and create new branch
              const { data: baseRef } = await github.rest.git.getRef({
                owner, repo, ref: `heads/${defaultBranch}`
              });
              await github.rest.git.createRef({
                owner, repo,
                ref: `refs/heads/${branch}`,
                sha: baseRef.object.sha
              });
            }
      - name: Setup Node.js (>=20)
        uses: actions/setup-node@v3
        with:
          node-version: '>=20'

      - name: Install OpenAI Codex CLI
        run: npm install -g @openai/codex

      - name: Set OpenAI API Key
        run: echo "OPENAI_API_KEY=${{ secrets.open_api_key }}" >> $GITHUB_ENV
        shell: bash

      - name: Run Codex CLI in full-auto mode with issue description
        run: |
          num="${{ github.event.issue.number }}"
          title="${{ github.event.issue.title }}"
          body="${{ github.event.issue.body }}"
          prompt="Issue #${num}: ${title}\n\n${body}"
          codex --full-auto --quiet "$prompt"
        shell: bash

      - name: Commit all changed files via REST API (with sha logic & ignore)
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const { owner, repo } = context.repo;
            const branch = '${{ steps.derive_branch.outputs.branch }}';
            const root = process.cwd();
      
            // 1) Load and parse .gitignore
            const gitignore = path.join(root, '.gitignore');
            const patterns = fs.existsSync(gitignore)
              ? fs.readFileSync(gitignore, 'utf8')
                  .split(/\r?\n/)
                  .map(l => l.trim())
                  .filter(l => l && !l.startsWith('#'))
              : [];
      
            const regexes = patterns.map(pat => {
              let re = pat.replace(/([.+^=!:${}()|[\]/\\])/g, '\\$1').replace(/\*/g, '.*');
              if (re.startsWith('/')) re = '^' + re.slice(1);
              else re = '(^|/)' + re;
              return new RegExp(re);
            });
      
            // 2) Walk the workspace
            function walk(dir) {
              return fs.readdirSync(dir, { withFileTypes: true }).flatMap(ent => {
                const full = path.join(dir, ent.name);
                return ent.isDirectory() ? walk(full) : [full];
              });
            }
            const all = walk(root).map(fp => path.relative(root, fp));
      
            // 3) Filter out .gitignore + cache/binary files
            const toCommit = all.filter(rel => {
              if (regexes.some(rx => rx.test(rel))) return false;
              if (rel.includes('__pycache__')) return false;
              if (rel.endsWith('.pyc') || rel.endsWith('.pyo')) return false;
              return true;
            });
      
            if (toCommit.length === 0) {
              console.log('Nothing to commit.');
              return;
            }
      
            // 4) Commit or update each file
            for (const relPath of toCommit) {
              const absPath = path.join(root, relPath);
              const content = fs.readFileSync(absPath, 'utf8');
              const params = {
                owner,
                repo,
                path: relPath,
                message: `chore: add/update ${relPath} for issue #${context.payload.issue.number}`,
                content: Buffer.from(content).toString('base64'),
                branch
              };
      
              // if file exists, fetch its sha
              try {
                const { data: existing } = await github.rest.repos.getContent({
                  owner,
                  repo,
                  path: relPath,
                  ref: branch
                });
                params.sha = existing.sha;
              } catch (err) {
                if (err.status !== 404) throw err;
                // 404 means new file → no sha needed
              }
      
              await github.rest.repos.createOrUpdateFileContents(params);
              console.log(`Committed ${relPath}`);
            }
      
      


      - name: Open Pull Request via REST API
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const branch = '${{ steps.derive_branch.outputs.branch }}';
            const base = context.payload.repository.default_branch;
            const issueNumber = context.payload.issue.number;
            await github.rest.pulls.create({
              owner, repo,
              head: branch,
              base,
              title: `chore: add placeholder test for issue #${issueNumber}`,
              body: `Automated PR to add placeholder test for issue #${issueNumber}: ${{ github.event.issue.title }}`
            });

      - name: Comment on the issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Issue #${context.issue.number} assigned to vseichter at ${new Date().toISOString()}`
            });
