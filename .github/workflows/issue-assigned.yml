name: Issue Assigned to vseichter

on:
  issues:
    types: [assigned]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  create-branch-and-pr:
    if: ${{ github.event.assignee.login == 'vseichter' }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

    steps:
      - name: Determine branch name
        id: derive_branch
        shell: bash
        run: |
          num=${{ github.event.issue.number }}
          title="${{ github.event.issue.title }}"
          sanitized=$(echo "$title" \
            | tr '[:upper:]' '[:lower:]' \
            | sed -E 's/[^a-z0-9]+/-/g' \
            | sed -E 's/^-+|-+$//g')
          echo "branch=issue-${num}-${sanitized}" >> "$GITHUB_OUTPUT"

      - name: Create (or fetch) branch via REST API
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const branch = '${{ steps.derive_branch.outputs.branch }}';
            const defaultBranch = context.payload.repository.default_branch;

            // try fetching the branch
            try {
              await github.rest.git.getRef({ owner, repo, ref: `heads/${branch}` });
            } catch {
              // branch doesn't exist → get default‐branch SHA and create new branch
              const { data: baseRef } = await github.rest.git.getRef({
                owner, repo, ref: `heads/${defaultBranch}`
              });
              await github.rest.git.createRef({
                owner, repo,
                ref: `refs/heads/${branch}`,
                sha: baseRef.object.sha
              });
            }
      - name: Setup Node.js (>=20)
        uses: actions/setup-node@v3
        with:
          node-version: '>=20'

      - name: Install OpenAI Codex CLI
        run: npm install -g @openai/codex

      - name: Set OpenAI API Key
        run: echo "OPENAI_API_KEY=${{ secrets.open_api_key }}" >> $GITHUB_ENV
        shell: bash

      - name: Run Codex CLI in full-auto mode with issue description
        run: |
          num="${{ github.event.issue.number }}"
          title="${{ github.event.issue.title }}"
          body="${{ github.event.issue.body }}"
          prompt="Issue #${num}: ${title}\n\n${body}"
          codex --full-auto --quiet "$prompt"
        shell: bash

      - name: Commit all files in tests/unit via REST API
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const { owner, repo } = context.repo;
            const branch = '${{ steps.derive_branch.outputs.branch }}';
            // Change this to whatever directory you want to commit
            const dir = './';

            // Recursively collect all files under `dir`
            function walk(dirPath) {
              return fs.readdirSync(dirPath, { withFileTypes: true }).flatMap(ent => {
                const full = path.join(dirPath, ent.name);
                return ent.isDirectory()
                  ? walk(full)
                  : [full];
              });
            }

            if (!fs.existsSync(dir)) {
              console.log(`Directory "${dir}" not found skipping.`);
              return;
            }

            const files = walk(dir);
            if (files.length === 0) {
              console.log(`No files to commit in "${dir}".`);
              return;
            }

            for (const filePath of files) {
              const content = fs.readFileSync(filePath, 'utf8');
              await github.rest.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: filePath,
                message: `chore: add/update ${filePath} for issue #${context.payload.issue.number}`,
                content: Buffer.from(content).toString('base64'),
                branch
              });
              console.log(`Committed ${filePath}`);
            }


      - name: Open Pull Request via REST API
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const branch = '${{ steps.derive_branch.outputs.branch }}';
            const base = context.payload.repository.default_branch;
            const issueNumber = context.payload.issue.number;
            await github.rest.pulls.create({
              owner, repo,
              head: branch,
              base,
              title: `chore: add placeholder test for issue #${issueNumber}`,
              body: `Automated PR to add placeholder test for issue #${issueNumber}: ${{ github.event.issue.title }}`
            });

      - name: Comment on the issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Issue #${context.issue.number} assigned to vseichter at ${new Date().toISOString()}`
            });
